// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  matricula String  @unique
  senha     String
  nome      String?
  cargo     String  @default("usuario") // admin, vendedor, motorista, gerente
  ativo     Boolean @default(true)
  criadoEm  DateTime @default(now())
  
  // Relacionamentos
  movimentacoes MovimentacaoEstoque[]
  vendas        Venda[]
  entregas      Entrega[]
}

model Fluxo {
  id          Int     @id @default(autoincrement())
  motoristaId Int
  veiculoId   String
  iniciadoEm  DateTime @default(now())
}

model Estoque {
  id          Int      @id @default(autoincrement())
  produto     String
  quantidade  Int
  unidade     String
  localizacao String?
  preco       Decimal? @db.Decimal(10, 2) // Preço unitário do produto
  criadoEm    DateTime @default(now())
  atualizadoEm DateTime @updatedAt
  
  // Relacionamentos
  movimentacoes MovimentacaoEstoque[]
  vendas        VendaItem[]
}

model MovimentacaoEstoque {
  id          Int      @id @default(autoincrement())
  estoqueId   Int
  tipo        String   // "ENTRADA" ou "SAIDA"
  quantidade  Int
  motivo      String   // "COMPRA", "VENDA", "AJUSTE", "PERDA", etc.
  observacao  String?
  responsavelId Int    // ID do usuário que fez a movimentação
  dataMovimentacao DateTime @default(now())
  
  // Relacionamentos
  estoque     Estoque  @relation(fields: [estoqueId], references: [id])
  responsavel User     @relation(fields: [responsavelId], references: [id])
}

model Cliente {
  id        Int      @id @default(autoincrement())
  nome      String
  email     String?  @unique
  telefone  String?
  endereco  String?
  criadoEm  DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // Relacionamentos
  vendas    Venda[]
}

model Venda {
  id          Int      @id @default(autoincrement())
  clienteId   Int?
  vendedorId  Int
  dataVenda   DateTime @default(now())
  total       Decimal  @db.Decimal(10, 2)
  status      String   @default("pendente") // pendente, aprovada, cancelada
  observacao  String?
  criadoEm    DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // Relacionamentos
  cliente     Cliente? @relation(fields: [clienteId], references: [id])
  vendedor    User     @relation(fields: [vendedorId], references: [id])
  itens       VendaItem[]
  entrega     Entrega?
}

model VendaItem {
  id             Int      @id @default(autoincrement())
  vendaId        Int
  estoqueId      Int
  quantidade     Int
  precoUnitario  Decimal  @db.Decimal(10, 2)
  subtotal       Decimal  @db.Decimal(10, 2)
  criadoEm       DateTime @default(now())

  // Relacionamentos
  venda          Venda    @relation(fields: [vendaId], references: [id], onDelete: Cascade)
  estoque        Estoque  @relation(fields: [estoqueId], references: [id])
}

model Entrega {
  id          Int      @id @default(autoincrement())
  vendaId     Int      @unique
  motoristaId Int
  endereco    String
  regiao      String?
  status      String   @default("pendente") // pendente, em_transito, entregue, cancelada
  dataEntrega DateTime?
  avaliacao   Int?     // 1-5 estrelas
  observacao  String?
  criadoEm    DateTime @default(now())
  
  // Relacionamentos
  venda       Venda   @relation(fields: [vendaId], references: [id])
  motorista   User    @relation(fields: [motoristaId], references: [id])
}
